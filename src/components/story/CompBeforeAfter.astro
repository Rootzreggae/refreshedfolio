---
export interface Props {
  beforeLabel?: string;
  afterLabel?: string;
  beforeImage?: string;
  afterImage?: string;
  height?: string;
}

const { 
  beforeLabel = "Before", 
  afterLabel = "After", 
  beforeImage,
  afterImage,
  height = "500px" 
} = Astro.props;

const id = `before-after-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="before-after" id={id} style={`height: ${height}`}>
  <div class="before">
    {beforeImage ? (
      <img src={beforeImage} alt={beforeLabel} loading="lazy" />
    ) : (
      <div class="placeholder-content">
        <slot name="before">
          <div style="text-align: center;">
            <h3 style="margin-bottom: 20px;">{beforeLabel}</h3>
          </div>
        </slot>
      </div>
    )}
  </div>
  
  <div class="after">
    {afterImage ? (
      <img src={afterImage} alt={afterLabel} loading="lazy" />
    ) : (
      <div class="placeholder-content">
        <slot name="after">
          <div style="text-align: center;">
            <h3 style="margin-bottom: 20px;">{afterLabel}</h3>
          </div>
        </slot>
      </div>
    )}
  </div>
  
  <div class="slider-handle">‚ü∑</div>
</div>

<style>
  .before-after {
    position: relative;
    margin: 80px 0;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid #333333;
    cursor: ew-resize;
  }
  
  .before, .after {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    font-weight: 500;
  }
  
  .before {
    background: #1a1a1a;
    color: #888888;
  }
  
  .after {
    background: #0f0f0f;
    color: #3390ff;
    clip-path: polygon(50% 0%, 100% 0%, 100% 100%, 50% 100%);
    transition: clip-path 0.1s ease;
  }
  
  .before img, .after img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .placeholder-content {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .slider-handle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 40px;
    background: #3390ff;
    border-radius: 50%;
    cursor: ew-resize;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #ffffff;
    font-size: 12px;
    z-index: 10;
  }
</style>

<script define:vars={{ id }}>
  const container = document.getElementById(id);
  const after = container.querySelector('.after');
  const handle = container.querySelector('.slider-handle');
  let isMouseDown = false;
  
  function updateSlider(event) {
    if (!isMouseDown) return;
    
    const rect = container.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));
    
    after.style.clipPath = `polygon(${percentage}% 0%, 100% 0%, 100% 100%, ${percentage}% 100%)`;
    handle.style.left = `${percentage}%`;
  }
  
  container.addEventListener('mousedown', (event) => {
    isMouseDown = true;
    updateSlider(event);
  });
  
  document.addEventListener('mousemove', updateSlider);
  
  document.addEventListener('mouseup', () => {
    isMouseDown = false;
  });
  
  container.addEventListener('mousemove', updateSlider);
</script>