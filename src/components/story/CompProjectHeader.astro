---
export interface Props {
  title: string;
  subtitle?: string;
  description?: string;
  metadata: {
    project?: string;
    role?: string;
    timeline?: string;
    client?: string;
    technologies?: string | string[];
  };
  accentColor?: string;
}

const { title, subtitle, description, metadata, accentColor = '#4a9eff' } = Astro.props;
---

<header class="comp-project-header">
  <div class="header-content">
    <h1 class="header-title">{title}</h1>
    {subtitle && <p class="header-subtitle">{subtitle}</p>}
    {description && <p class="header-description">{description}</p>}
  </div>

  <aside class="header-metadata">
    {metadata.project && (
      <div class="meta-item">
        <span class="meta-label">PROJECT</span>
        <span class="meta-value">{metadata.project}</span>
      </div>
    )}
    {metadata.role && (
      <div class="meta-item">
        <span class="meta-label">ROLE</span>
        <span class="meta-value">{metadata.role}</span>
      </div>
    )}
    {metadata.timeline && (
      <div class="meta-item">
        <span class="meta-label">TIMELINE</span>
        <span class="meta-value">{metadata.timeline}</span>
      </div>
    )}
    {metadata.client && (
      <div class="meta-item">
        <span class="meta-label">CLIENT</span>
        <span class="meta-value">{metadata.client}</span>
      </div>
    )}
    {metadata.technologies && (
      <div class="meta-item">
        <span class="meta-label">TECHNOLOGIES</span>
        <span class="meta-value">
          {Array.isArray(metadata.technologies)
            ? metadata.technologies.join(', ')
            : metadata.technologies}
        </span>
      </div>
    )}
  </aside>
</header>

<style define:vars={{ accentColor }}>
  .comp-project-header {
    display: grid;
    grid-template-columns: 1fr 320px;
    gap: 80px;
    padding: 120px 0;
    margin-bottom: 80px;
    position: relative;
  }

  .comp-project-header::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(to right, transparent, #333 20%, #333 80%, transparent);
  }

  .header-content {
    max-width: 720px;
  }

  .header-title {
    font-size: clamp(40px, 5vw, 64px);
    font-weight: 700;
    line-height: 1.1;
    margin: 0 0 24px;
    color: #fff;
    letter-spacing: -0.025em;
  }

  .header-subtitle {
    font-size: clamp(20px, 2.5vw, 28px);
    font-weight: 300;
    line-height: 1.3;
    margin: 0 0 32px;
    color: #a0a0a0;
  }

  .header-description {
    font-size: 18px;
    line-height: 1.7;
    color: #ccc;
    margin: 0;
  }

  .header-metadata {
    padding-top: 8px;
    display: flex;
    flex-direction: column;
    gap: 28px;
  }

  .meta-item {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .meta-label {
    font-size: 11px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    color: #666;
  }

  .meta-value {
    font-size: 15px;
    line-height: 1.5;
    color: #e0e0e0;
  }

  @media (max-width: 1024px) {
    .comp-project-header {
      grid-template-columns: 1fr 280px;
      gap: 60px;
      padding: 80px 0;
    }
  }

  @media (max-width: 768px) {
    .comp-project-header {
      grid-template-columns: 1fr;
      gap: 48px;
      padding: 60px 0;
    }

    .header-metadata {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 32px 40px;
      padding-top: 0;
      border-top: 1px solid #333;
      padding-top: 48px;
    }

    .header-title {
      font-size: clamp(32px, 8vw, 48px);
    }
  }

  @media (max-width: 480px) {
    .header-metadata {
      grid-template-columns: 1fr;
      gap: 24px;
    }
  }
</style>