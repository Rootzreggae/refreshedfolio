---
// Interactive Paper Fold Corner with Figma Easter Egg
---

<!-- Interactive Fold Corner with Peek Window -->
<div id="fold-corner" class="fold-corner">
  <!-- Peek window showing Figma content underneath -->
  <div class="fold-peek-window">
    <div class="figma-peek-preview">
      <!-- Mini Figma UI preview -->
      <div class="peek-tab-bar">
        <div class="peek-figma-logo">
          <svg width="8" height="12" viewBox="0 0 12 18" fill="none">
            <path d="M3 18C4.65 18 6 16.65 6 15V12H3C1.35 12 0 13.35 0 15C0 16.65 1.35 18 3 18Z" fill="#0ACF83"/>
            <path d="M0 9C0 7.35 1.35 6 3 6H6V12H3C1.35 12 0 10.65 0 9Z" fill="#A259FF"/>
            <path d="M0 3C0 1.35 1.35 0 3 0H6V6H3C1.35 6 0 4.65 0 3Z" fill="#F24E1E"/>
            <path d="M6 0H9C10.65 0 12 1.35 12 3C12 4.65 10.65 6 9 6H6V0Z" fill="#FF7262"/>
          </svg>
        </div>
        <div class="peek-tabs">
          <div class="peek-tab active">Design</div>
          <div class="peek-tab">Is</div>
          <div class="peek-tab">Not</div>
        </div>
      </div>
      <div class="peek-canvas">
        <div class="peek-frame">
          <div class="peek-frame-title">About</div>
          <div class="peek-text-line"></div>
          <div class="peek-text-line short"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- The actual fold triangle -->
  <div class="fold-triangle"></div>
</div>

<div id="paper-corner-system" class="paper-corner-system">
  <!-- Layer 1: Portfolio Content (transparent overlay) -->
  <div id="portfolio-layer" class="portfolio-layer">
    <!-- This overlays the actual page content -->
  </div>

  <!-- Layer 2: Figma Workspace (hidden by default) -->
  <div id="figma-layer" class="figma-layer hidden">
    <div class="figma-workspace">
      <!-- Figma Interface Content -->
      <div class="app">
        <!-- Mac Window Bar -->
        <div class="window-bar">
          <div class="window-controls">
            <div class="window-control close"></div>
            <div class="window-control minimize"></div>
            <div class="window-control maximize"></div>
          </div>
        </div>

        <!-- Tab Bar -->
        <div class="tab-bar">
          <div class="tabs-section">
            <div class="figma-logo">
              <svg width="12" height="18" viewBox="0 0 12 18" fill="none">
                <path d="M3 18C4.65 18 6 16.65 6 15V12H3C1.35 12 0 13.35 0 15C0 16.65 1.35 18 3 18Z" fill="#0ACF83"/>
                <path d="M0 9C0 7.35 1.35 6 3 6H6V12H3C1.35 12 0 10.65 0 9Z" fill="#A259FF"/>
                <path d="M0 3C0 1.35 1.35 0 3 0H6V6H3C1.35 6 0 4.65 0 3Z" fill="#F24E1E"/>
                <path d="M6 0H9C10.65 0 12 1.35 12 3C12 4.65 10.65 6 9 6H6V0Z" fill="#FF7262"/>
                <path d="M12 9C12 10.65 10.65 12 9 12C7.35 12 6 10.65 6 9C6 7.35 7.35 6 9 6C10.65 6 12 7.35 12 9Z" fill="#1ABCFE"/>
              </svg>
            </div>
            <div class="tab-container">
              <div class="tab-item active">
                <span class="tab-title">Design</span>
                <button class="tab-close">×</button>
              </div>
              <div class="tab-item">
                <span class="tab-title">Is</span>
                <button class="tab-close">×</button>
              </div>
              <div class="tab-item">
                <span class="tab-title">Not</span>
                <button class="tab-close">×</button>
              </div>
              <div class="tab-item">
                <span class="tab-title">Just</span>
                <button class="tab-close">×</button>
              </div>
              <div class="tab-item">
                <span class="tab-title">Pixels</span>
                <button class="tab-close">×</button>
              </div>
              <div class="tab-item">
                <span class="tab-title">It's</span>
                <button class="tab-close">×</button>
              </div>
              <div class="tab-item">
                <span class="tab-title">Problem</span>
                <button class="tab-close">×</button>
              </div>
              <div class="tab-item">
                <span class="tab-title">Solving</span>
                <button class="tab-close">×</button>
              </div>
              <div class="tab-item">
                <span class="tab-title">Magic</span>
                <button class="tab-close">×</button>
              </div>
            </div>
          </div>

          <div class="tab-bar-controls">
            <button class="share-btn" aria-label="Share">Share</button>
            <div class="user-avatar">NG</div>
          </div>
        </div>

        <!-- Main Content -->
        <div class="main">
          <!-- Sidebar -->
          <aside class="sidebar">
            <div class="sidebar-header">
              <div class="sidebar-controls">
                <button class="sidebar-btn" aria-label="Menu">
                  <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                    <rect x="2" y="2" width="5" height="5" stroke="currentColor"/>
                    <rect x="9" y="2" width="5" height="5" stroke="currentColor"/>
                    <rect x="2" y="9" width="5" height="5" stroke="currentColor"/>
                    <rect x="9" y="9" width="5" height="5" stroke="currentColor"/>
                  </svg>
                </button>
              </div>
              <button class="sidebar-btn" aria-label="Collapse">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                  <rect x="2" y="2" width="12" height="12" stroke="currentColor"/>
                </svg>
              </button>
            </div>

            <div class="file-info">
              <div class="file-name">Portfolio-refresh</div>
              <div class="file-meta">
                <span>Drafts</span>
              </div>
            </div>

            <div class="tabs">
              <button class="tab active">File</button>
              <button class="tab">Assets</button>
            </div>

            <div class="search">
              <svg class="search-icon" width="14" height="14" viewBox="0 0 14 14" fill="none">
                <circle cx="6" cy="6" r="4" stroke="currentColor" stroke-width="1.5"/>
                <path d="M9 9L12 12" stroke="currentColor" stroke-width="1.5"/>
              </svg>
              <input type="text" class="search-input" placeholder="Search">
            </div>

            <div class="sidebar-content">
              <div class="section">
                <div class="section-header">
                  <span>Pages</span>
                  <button class="add-btn" aria-label="Add page">
                    <svg width="14" height="14" viewBox="0 0 14 14" fill="none">
                      <path d="M7 3V11M3 7H11" stroke="currentColor" stroke-width="1.5"/>
                    </svg>
                  </button>
                </div>
                <div class="page-item active">Page 1</div>
              </div>

              <div class="section">
                <div class="section-header">
                  <span>Layers</span>
                </div>
                <ul class="layers">
                  <li class="layer">
                    <div class="layer-icon">
                      <svg width="14" height="14" viewBox="0 0 14 14" fill="none">
                        <rect x="2" y="2" width="10" height="10" stroke="currentColor"/>
                      </svg>
                    </div>
                    <span class="layer-name">about frame</span>
                    <span class="layer-position">-700</span>
                  </li>
                  <li class="layer">
                    <div class="layer-icon">#</div>
                    <span class="layer-name">homepage</span>
                  </li>
                  <li class="layer">
                    <div class="layer-icon">#</div>
                    <span class="layer-name">portfolio</span>
                    <span class="layer-position">-500</span>
                  </li>
                </ul>
              </div>
            </div>
          </aside>

          <!-- Canvas -->
          <div class="canvas-container">
            <div class="canvas">
              <div class="frame frame-dark">
                <div class="frame-header">
                  <div class="frame-title">About</div>
                </div>
                <div class="frame-content">
                  <p class="intro">I'm a product designer specializing in developer tools and observability platforms. My broad design background helps me create technical products that feel surprisingly human.</p>

                  <h2>Why I Design for Technical Products</h2>

                  <p>Complex problems energize me. Transforming observability data into actionable insights at Grafana taught me that the harder the technical challenge, the more impactful good design becomes.</p>
                </div>
              </div>

              <div class="frame frame-dark">
                <div class="frame-header">
                  <div class="frame-title">Homepage</div>
                </div>
                <div class="frame-content">
                  <h1>Nilson is building<br>tools at Dynatrace.</h1>
                  <p>Building a self-hosted solution that developers actually want to use. Reducing complexity while maintaining security standards that enterprise teams trust.</p>

                  <div class="content-section">
                    <h3>Past Work</h3>
                    <p>Keystrok • Open Source • Grafana Labs • Jungle AI</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Inspector -->
          <aside class="inspector">
            <div class="inspector-header">
              <button class="user-btn active">
                <span>N</span>
              </button>
              <button class="play-btn">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                  <path d="M5 4V12L11 8L5 4Z" fill="currentColor"/>
                </svg>
              </button>
              <button class="share-btn">Share</button>
            </div>

            <div class="inspector-tabs">
              <button class="inspector-tab active">Design</button>
              <button class="inspector-tab">Prototype</button>
              <button class="inspector-tab">
                <span>48%</span>
                <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                  <path d="M3 5L6 8L9 5" stroke="currentColor" stroke-width="1.5"/>
                </svg>
              </button>
            </div>

            <div class="inspector-content">
              <div class="section">
                <div class="section-title">Page</div>
                <div class="page-selector">
                  <span>1E1E1E</span>
                  <input type="text" value="100" class="input-small">
                  <span>%</span>
                </div>
              </div>
            </div>
          </aside>
        </div>
      </div>
    </div>
  </div>

  <!-- Layer 3: Background -->
  <div id="background-layer" class="background-layer">
    <!-- Subtle pattern or solid color background -->
  </div>


  <!-- Close Button (visible when Figma is revealed) -->
  <button id="close-figma" class="close-figma hidden" aria-label="Close Figma workspace">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
      <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
    </svg>
  </button>
</div>

<style>
  /* Layer System */
  .paper-corner-system {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    pointer-events: none;
    /* EMERGENCY: Much lower z-index to not interfere */
    z-index: 1;
    background: transparent !important;
  }

  .portfolio-layer,
  .figma-layer,
  .background-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform-origin: top right;
    will-change: transform;
    backface-visibility: hidden;
  }

  .portfolio-layer {
    z-index: 3;
    pointer-events: none; /* CRITICAL: Never interfere with page content */
    transform-style: preserve-3d;
    background: transparent; /* CRITICAL: Never block page content */
    /* Hidden by default - should only show when actively peeling */
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .portfolio-layer.peeling {
    opacity: 1; /* Only show when actively peeling */
    visibility: visible;
    pointer-events: none; /* Still no interaction even when peeling */
  }

  .figma-layer {
    z-index: 2;
    background: #1a1a1a;
    /* Page-turn reveal animation */
    transform: perspective(2000px) rotateY(-90deg) translateZ(-1px);
    transform-origin: left center;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1),
                opacity 0.4s ease 0.2s,
                visibility 0.6s ease;
  }

  .figma-layer.visible {
    transform: perspective(2000px) rotateY(0deg) translateZ(-1px);
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
    z-index: 1000000; /* Below close button but above everything else */
  }

  .figma-layer.hidden {
    transform: perspective(2000px) rotateY(-90deg) translateZ(-1px);
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
  }

  .background-layer {
    z-index: 1;
    background: linear-gradient(135deg, #2a2a2a 0%, #1e1e1e 100%);
  }

  /* Fold Corner */
  .fold-corner {
    position: fixed;
    top: 0;
    right: 0;
    width: 120px;
    height: 120px;
    /* EMERGENCY: Higher z-index than paper system but not blocking main content */
    z-index: 100;
    pointer-events: auto;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .fold-corner:hover {
    transform: scale(1.02);
  }

  .fold-corner:active {
    transform: scale(0.98);
  }

  .fold-triangle {
    position: absolute;
    top: 0;
    right: 0;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 0 80px 80px 0;

    /* Semi-transparent fold triangle that acts as an overlay */
    border-color: transparent rgba(255, 255, 255, 0.7) transparent transparent;

    /* Paper-like texture with slight transparency */
    background: linear-gradient(135deg,
      rgba(255, 255, 255, 0.8) 0%,
      rgba(245, 245, 245, 0.9) 100%
    );

    transition: all cubic-bezier(0.4, 0, 0.2, 1) 0.3s;
    transform-origin: top right;
    will-change: transform, border-width, filter;
    cursor: pointer;
    z-index: 20; /* Above the peek window */

    /* Paper-like shadow for depth */
    filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.15));

    /* Subtle paper texture */
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }

  .fold-corner:hover .fold-triangle {
    border-width: 0 100px 100px 0;
    /* More prominent paper effect on hover */
    border-color: transparent rgba(255, 255, 255, 0.85) transparent transparent;
    background: linear-gradient(135deg,
      rgba(255, 255, 255, 0.9) 0%,
      rgba(245, 245, 245, 0.95) 100%
    );
    filter: drop-shadow(0 4px 12px rgba(0, 0, 0, 0.2));
    transform: scale(1.05);
  }

  /* Add a subtle animated pulse to hint at interactivity */
  @keyframes subtle-pulse {
    0%, 100% {
      filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.15));
      transform: scale(1);
    }
    50% {
      filter: drop-shadow(0 3px 12px rgba(0, 0, 0, 0.2));
      transform: scale(1.02);
    }
  }

  .fold-triangle {
    animation: subtle-pulse 4s ease-in-out infinite;
  }

  .fold-corner:hover .fold-triangle {
    animation: none; /* Stop pulse on hover */
  }

  /* Peek Window - Shows Figma content through triangular cutout */
  .fold-peek-window {
    position: absolute;
    top: 0;
    right: 0;
    width: 120px;
    height: 120px;
    overflow: hidden;
    z-index: 10; /* Behind the fold triangle */

    /* Triangle shape using clip-path */
    clip-path: polygon(100% 0, 100% 100%, 0 0);

    /* Add subtle border effect */
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);

    /* Smooth transitions */
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);

    /* Pointer events for the preview area */
    pointer-events: auto;
    cursor: pointer;
  }

  .fold-corner:hover .fold-peek-window {
    /* Slightly expand on hover */
    clip-path: polygon(100% 0, 100% 110%, -10% 0);
  }

  /* Figma Preview Content */
  .figma-peek-preview {
    position: absolute;
    top: 0;
    right: 0;
    width: 200px;
    height: 200px;
    background: #1a1a1a;
    transform: scale(0.6);
    transform-origin: top right;
    opacity: 0.9;

    /* Create the authentic Figma look */
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);

    /* Ensure it's properly clipped */
    overflow: hidden;
  }

  /* Mini Tab Bar */
  .peek-tab-bar {
    height: 32px;
    background: #2c2c2c;
    display: flex;
    align-items: center;
    padding: 0 8px;
    gap: 6px;
    border-bottom: 1px solid #333;
  }

  .peek-figma-logo {
    flex-shrink: 0;
    opacity: 0.8;
  }

  .peek-tabs {
    display: flex;
    gap: 2px;
    overflow: hidden;
  }

  .peek-tab {
    background: #383838;
    color: #fff;
    font-size: 8px;
    padding: 2px 6px;
    border-radius: 2px;
    white-space: nowrap;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  }

  .peek-tab.active {
    background: #007aff;
  }

  /* Mini Canvas */
  .peek-canvas {
    padding: 8px;
    background: #1a1a1a;
    height: calc(100% - 32px);
  }

  .peek-frame {
    background: #2c2c2c;
    border-radius: 4px;
    padding: 8px;
    border: 1px solid #333;
    height: 100%;
  }

  .peek-frame-title {
    font-size: 8px;
    color: #888;
    margin-bottom: 6px;
    font-weight: 500;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  }

  .peek-text-line {
    height: 6px;
    background: linear-gradient(90deg, #666 0%, #444 100%);
    border-radius: 1px;
    margin-bottom: 3px;
    opacity: 0.7;
  }

  .peek-text-line.short {
    width: 60%;
  }

  /* Enhanced peek visibility on hover */
  .fold-corner:hover .figma-peek-preview {
    opacity: 1;
    transform: scale(0.65);
  }

  /* Add a subtle glow to indicate it's clickable */
  .fold-corner:hover .fold-peek-window {
    background: linear-gradient(135deg,
      rgba(162, 89, 255, 0.15) 0%,
      rgba(26, 188, 254, 0.1) 50%,
      transparent 100%
    );
  }

  /* Simplified - no drag-based peel animations needed */
  .portfolio-layer.peeling {
    opacity: 1;
    visibility: visible;
  }

  /* Figma Workspace Styles */
  .figma-workspace {
    width: 100%;
    height: 100%;
    background: #1a1a1a;
    color: #ffffff;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    font-size: 14px;
  }

  .app {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  /* Window Bar */
  .window-bar {
    height: 28px;
    background: #2c2c2c;
    display: flex;
    align-items: center;
    padding: 0 12px;
    border-bottom: 1px solid #333;
  }

  .window-controls {
    display: flex;
    gap: 8px;
  }

  .window-control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .window-control.close { background: #ff5f57; }
  .window-control.minimize { background: #ffbd2e; }
  .window-control.maximize { background: #28ca42; }

  /* Tab Bar */
  .tab-bar {
    height: 50px;
    background: #2c2c2c;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 16px;
    border-bottom: 1px solid #333;
  }

  .tabs-section {
    display: flex;
    align-items: center;
    gap: 16px;
    flex: 1;
  }

  .figma-logo {
    flex-shrink: 0;
  }

  .tab-container {
    display: flex;
    gap: 2px;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .tab-container::-webkit-scrollbar {
    display: none;
  }

  .tab-item {
    display: flex;
    align-items: center;
    padding: 6px 12px;
    background: #1a1a1a;
    border-radius: 4px;
    min-width: 80px;
    white-space: nowrap;
    font-size: 12px;
  }

  .tab-item.active {
    background: #383838;
  }

  .tab-title {
    flex: 1;
    margin-right: 8px;
  }

  .tab-close {
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    font-size: 14px;
    width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .tab-close:hover {
    color: #fff;
    background: #ff5f57;
    border-radius: 2px;
  }

  .tab-bar-controls {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .share-btn {
    background: #007aff;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
  }

  .user-avatar {
    width: 24px;
    height: 24px;
    background: #ff6b35;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    font-weight: bold;
  }

  /* Main Layout */
  .main {
    flex: 1;
    display: flex;
    overflow: hidden;
  }

  /* Sidebar */
  .sidebar {
    width: 240px;
    background: #2c2c2c;
    border-right: 1px solid #333;
    display: flex;
    flex-direction: column;
  }

  .sidebar-header {
    padding: 12px;
    border-bottom: 1px solid #333;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .sidebar-controls {
    display: flex;
    gap: 8px;
  }

  .sidebar-btn {
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    padding: 4px;
    border-radius: 2px;
  }

  .sidebar-btn:hover {
    color: #fff;
    background: #383838;
  }

  .file-info {
    padding: 12px;
    border-bottom: 1px solid #333;
  }

  .file-name {
    font-weight: 500;
    margin-bottom: 4px;
  }

  .file-meta {
    font-size: 12px;
    color: #888;
  }

  .tabs {
    display: flex;
    border-bottom: 1px solid #333;
  }

  .tab {
    flex: 1;
    padding: 12px;
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    font-size: 12px;
  }

  .tab.active {
    color: #fff;
    background: #383838;
  }

  .search {
    padding: 12px;
    border-bottom: 1px solid #333;
    position: relative;
  }

  .search-icon {
    position: absolute;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    color: #888;
  }

  .search-input {
    width: 100%;
    background: #1a1a1a;
    border: 1px solid #383838;
    border-radius: 4px;
    padding: 8px 8px 8px 32px;
    color: #fff;
    font-size: 12px;
  }

  .search-input::placeholder {
    color: #888;
  }

  .sidebar-content {
    flex: 1;
    overflow-y: auto;
    padding: 12px;
  }

  .section {
    margin-bottom: 20px;
  }

  .section-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 8px;
    font-size: 12px;
    font-weight: 500;
    color: #888;
  }

  .add-btn {
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    padding: 2px;
    border-radius: 2px;
  }

  .add-btn:hover {
    color: #fff;
    background: #383838;
  }

  .page-item {
    padding: 6px 8px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
  }

  .page-item.active {
    background: #007aff;
    color: white;
  }

  .layers {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .layer {
    display: flex;
    align-items: center;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    margin-bottom: 2px;
  }

  .layer:hover {
    background: #383838;
  }

  .layer-icon {
    width: 16px;
    height: 16px;
    margin-right: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #888;
  }

  .layer-name {
    flex: 1;
  }

  .layer-position {
    font-size: 10px;
    color: #888;
  }

  /* Canvas */
  .canvas-container {
    flex: 1;
    background: #1a1a1a;
    position: relative;
    overflow: auto;
  }

  .canvas {
    padding: 40px;
    display: flex;
    gap: 40px;
  }

  .frame {
    width: 350px;
    background: #2c2c2c;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .frame-dark {
    background: #000;
    border: 1px solid #333;
  }

  .frame-header {
    padding: 12px 16px;
    border-bottom: 1px solid #333;
    background: #1a1a1a;
  }

  .frame-title {
    font-size: 12px;
    font-weight: 500;
    color: #888;
  }

  .frame-content {
    padding: 24px;
    color: #fff;
    line-height: 1.6;
  }

  .frame-content h1 {
    font-size: 32px;
    font-weight: 600;
    margin-bottom: 16px;
    line-height: 1.2;
  }

  .frame-content h2 {
    font-size: 20px;
    font-weight: 600;
    margin: 24px 0 12px;
  }

  .frame-content h3 {
    font-size: 16px;
    font-weight: 600;
    margin: 20px 0 8px;
  }

  .frame-content p {
    margin-bottom: 16px;
    color: #ccc;
  }

  .intro {
    font-size: 16px;
    color: #fff;
    margin-bottom: 24px;
  }

  .content-section {
    margin-top: 32px;
  }

  /* Inspector */
  .inspector {
    width: 280px;
    background: #2c2c2c;
    border-left: 1px solid #333;
    display: flex;
    flex-direction: column;
  }

  .inspector-header {
    padding: 12px;
    border-bottom: 1px solid #333;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .user-btn {
    width: 32px;
    height: 32px;
    background: #ff6b35;
    border: none;
    border-radius: 50%;
    color: white;
    font-weight: bold;
    cursor: pointer;
  }

  .user-btn.active {
    box-shadow: 0 0 0 2px #007aff;
  }

  .play-btn {
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
  }

  .play-btn:hover {
    color: #fff;
    background: #383838;
  }

  .inspector .share-btn {
    margin-left: auto;
  }

  .inspector-tabs {
    display: flex;
    border-bottom: 1px solid #333;
  }

  .inspector-tab {
    flex: 1;
    padding: 12px;
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    font-size: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 4px;
  }

  .inspector-tab.active {
    color: #fff;
    background: #383838;
  }

  .inspector-content {
    flex: 1;
    padding: 16px;
    overflow-y: auto;
  }

  .section-title {
    font-size: 12px;
    font-weight: 500;
    color: #888;
    margin-bottom: 8px;
  }

  .page-selector {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 12px;
  }

  .input-small {
    width: 60px;
    background: #1a1a1a;
    border: 1px solid #383838;
    border-radius: 4px;
    padding: 4px 8px;
    color: #fff;
    font-size: 12px;
    text-align: center;
  }

  /* EMERGENCY FIXES FOR CRITICAL ISSUES */

  /* Force correct initial state - Portfolio view */
  body:not(.figma-active) .portfolio-layer,
  body:not(.figma-active) main[role="main"] {
    display: block !important;
    opacity: 1 !important;
    visibility: visible !important;
    z-index: 1 !important;
  }

  body:not(.figma-active) .figma-layer,
  body:not(.figma-active) #figma-workspace {
    display: none !important;
    opacity: 0 !important;
    visibility: hidden !important;
  }

  body:not(.figma-active) .fold-corner {
    display: block !important;
    z-index: 1000 !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  /* Force correct Figma state - COMPLETELY hide portfolio and fold */
  body.figma-active .portfolio-layer,
  body.figma-active main[role="main"] {
    display: none !important;
    opacity: 0 !important;
    visibility: hidden !important;
    z-index: -1 !important;
  }

  body.figma-active .figma-layer,
  body.figma-active #figma-workspace {
    display: block !important;
    opacity: 1 !important;
    visibility: visible !important;
    background: #1a1a1a !important;
    z-index: 9998 !important;
  }

  /* CRITICAL: Completely hide fold when Figma is active */
  body.figma-active .fold-corner,
  .figma-layer.visible ~ .fold-corner,
  .figma-layer.visible .fold-corner {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
    pointer-events: none !important;
    z-index: -9999 !important;
  }

  /* Close Button - positioned exactly where fold corner was */
  .close-figma {
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 1000001 !important; /* HIGHEST possible z-index - above everything */
    /* Glass-morphism styling */
    background: rgba(0, 0, 0, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    width: 80px;
    height: 80px;
    color: white;
    cursor: pointer;
    transition: all cubic-bezier(0.4, 0, 0.2, 1) 0.3s;
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    display: flex;
    align-items: center;
    justify-content: center;

    /* Subtle gradient border hint */
    box-shadow:
      inset 0 1px 0 rgba(255, 255, 255, 0.1),
      0 4px 20px rgba(0, 0, 0, 0.2),
      0 0 0 1px rgba(162, 89, 255, 0.1);
  }

  .close-figma:hover {
    background: rgba(0, 0, 0, 0.25);
    border-color: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
    box-shadow:
      inset 0 1px 0 rgba(255, 255, 255, 0.2),
      0 6px 25px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(162, 89, 255, 0.3);
  }

  .close-figma.hidden {
    opacity: 0;
    pointer-events: none;
    transform: scale(0.8) translateY(-10px);
  }

  /* Smooth entrance animation when showing */
  .close-figma:not(.hidden) {
    animation: closeButtonEntrance 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes closeButtonEntrance {
    0% {
      opacity: 0;
      transform: scale(0.8) translateY(-10px);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  /* Clean layer system that doesn't interfere with portfolio */
  .paper-corner-system {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    z-index: 1;
    pointer-events: none; /* System itself has no interactions */
    background: transparent;
  }

  .paper-corner-system .fold-corner {
    pointer-events: auto; /* Only the fold corner can be interacted with */
  }

  /* Responsive - Hide only on mobile/tablet */
  @media (max-width: 768px) {
    .paper-corner-system {
      display: none !important;
    }
  }

  /* Portfolio visibility enforcement */
  @media (min-width: 769px) {
    /* Ensure homepage content is always visible on desktop */
    body main[role="main"] {
      display: block;
      visibility: visible;
      opacity: 1;
      position: static;
      z-index: 1;
      pointer-events: auto;
    }

    /* Ensure overlay layers don't interfere when not active */
    .portfolio-layer:not(.peeling) {
      opacity: 0;
      visibility: hidden;
    }
  }

  /* Performance optimizations */
  @media (prefers-reduced-motion: reduce) {
    .fold-triangle,
    .figma-layer,
    .close-figma {
      transition: none !important;
      animation: none !important;
    }

    .fold-triangle {
      animation: none !important;
    }
  }
</style>

<script>
  class PaperCornerSystem {
    state: { isRevealed: boolean };
    _portfolioVisibilityEnsured: boolean;
    _closing: boolean;
    elements: {
      system: HTMLElement | null;
      portfolioLayer: HTMLElement | null;
      figmaLayer: HTMLElement | null;
      foldCorner: HTMLElement | null;
      foldTriangle: HTMLElement | null;
      closeButton: HTMLElement | null;
    };

    constructor() {
      this.state = {
        isRevealed: false
      };

      this._portfolioVisibilityEnsured = false;
      this._closing = false;

      this.elements = {
        system: null,
        portfolioLayer: null,
        figmaLayer: null,
        foldCorner: null,
        foldTriangle: null,
        closeButton: null
      };

      this.initializeElements();
      this.setupBodyTransforms();
      this.loadState();
      this.bindEvents();
      this.updateDisplay();
    }

    setupBodyTransforms() {
      if (this.elements.portfolioLayer) {
        this.elements.portfolioLayer.style.transformOrigin = 'top right';
        this.elements.portfolioLayer.style.transformStyle = 'preserve-3d';
      }
    }

    initializeElements() {
      this.elements.system = document.getElementById('paper-corner-system');
      this.elements.portfolioLayer = document.getElementById('portfolio-layer');
      this.elements.figmaLayer = document.getElementById('figma-layer');
      this.elements.foldCorner = document.getElementById('fold-corner');
      this.elements.foldTriangle = this.elements.foldCorner?.querySelector('.fold-triangle') || null;
      this.elements.closeButton = document.getElementById('close-figma');

      // Log elements for debugging
      console.log('Paper corner elements initialized:', {
        system: !!this.elements.system,
        portfolioLayer: !!this.elements.portfolioLayer,
        figmaLayer: !!this.elements.figmaLayer,
        foldCorner: !!this.elements.foldCorner,
        closeButton: !!this.elements.closeButton
      });
    }

    loadState() {
      // Always start with portfolio view as default
      try {
        localStorage.removeItem('paper-corner-state');
      } catch (error) {
        console.warn('Failed to clear paper corner state:', error);
      }

      // Safe defaults - Portfolio should always be default view
      this.state.isRevealed = false;

      console.log('Paper corner state set to defaults - portfolio view');
    }

    saveState() {
      try {
        localStorage.setItem('paper-corner-state', JSON.stringify({
          isRevealed: this.state.isRevealed
        }));
      } catch (error) {
        console.warn('Failed to save paper corner state:', error);
      }
    }

    bindEvents() {
      if (!this.elements.foldCorner) return;

      // Simple click to reveal - no more dragging
      this.elements.foldCorner.addEventListener('click', this.handleFoldClick.bind(this));

      // Also handle clicks on the peek window specifically
      const peekWindow = this.elements.foldCorner.querySelector('.fold-peek-window');
      if (peekWindow) {
        (peekWindow as HTMLElement).addEventListener('click', this.handleFoldClick.bind(this));
      }

      // Close button
      this.elements.closeButton?.addEventListener('click', this.closeFigma.bind(this));

      // Portfolio layer click as backup navigation (click anywhere outside Figma to close)
      this.elements.portfolioLayer?.addEventListener('click', (e) => {
        if (this.state.isRevealed && e.target === this.elements.portfolioLayer) {
          console.log('Portfolio layer clicked - closing Figma');
          this.closeFigma();
        }
      });

      // ESC key as backup navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.state.isRevealed) {
          e.preventDefault();
          this.closeFigma();
        }
      });

      // Prevent default drag behavior
      this.elements.foldCorner.addEventListener('dragstart', (e) => e.preventDefault());
    }

    handleFoldClick(event: MouseEvent) {
      event.preventDefault();
      event.stopPropagation();

      console.log('Fold corner clicked - revealing Figma workspace');

      // Simple click reveals Figma with smooth page-turn animation
      this.revealFigmaWithPageTurn();
    }

    revealFigmaWithPageTurn() {
      console.log('EMERGENCY FIX: Revealing Figma workspace with proper state management...');

      this.state.isRevealed = true;

      // CRITICAL: Add body class for CSS targeting
      document.body.classList.add('figma-active');
      console.log('Added figma-active class to body');

      // Hide fold corner COMPLETELY
      if (this.elements.foldCorner) {
        this.elements.foldCorner.style.display = 'none';
        this.elements.foldCorner.style.visibility = 'hidden';
        this.elements.foldCorner.style.opacity = '0';
        this.elements.foldCorner.style.pointerEvents = 'none';
        this.elements.foldCorner.style.zIndex = '-9999';
      }

      // Hide portfolio layer COMPLETELY
      if (this.elements.portfolioLayer) {
        this.elements.portfolioLayer.style.display = 'none';
        this.elements.portfolioLayer.style.opacity = '0';
        this.elements.portfolioLayer.style.visibility = 'hidden';
      }

      // Also hide main content directly
      const mainElement = document.querySelector('main[role="main"]');
      if (mainElement) {
        (mainElement as HTMLElement).style.display = 'none';
        (mainElement as HTMLElement).style.opacity = '0';
        (mainElement as HTMLElement).style.visibility = 'hidden';
      }

      // Show Figma layer with page-turn effect
      if (this.elements.figmaLayer) {
        this.elements.figmaLayer.classList.remove('hidden');
        this.elements.figmaLayer.classList.add('visible');
        this.elements.figmaLayer.style.display = 'block';
        this.elements.figmaLayer.style.visibility = 'visible';
        this.elements.figmaLayer.style.opacity = '1';
        this.elements.figmaLayer.style.background = '#1a1a1a';
        this.elements.figmaLayer.style.zIndex = '1000000';
        console.log('Figma layer revealed with page-turn');
      }

      // Show close button with entrance animation
      if (this.elements.closeButton) {
        setTimeout(() => {
          this.elements.closeButton?.classList.remove('hidden');
          this.elements.closeButton!.style.zIndex = '1000001'; // Ensure highest z-index
        }, 300); // Delay to let page-turn start first
      }

      this.saveState();
    }

    revealFigma() {
      // Use the new page-turn method for consistency
      this.revealFigmaWithPageTurn();
    }


    closeFigma() {
      // Prevent multiple simultaneous calls
      if (this._closing) return;
      this._closing = true;

      console.log('EMERGENCY FIX: Closing Figma layer - returning to portfolio with proper state management');

      this.state.isRevealed = false;

      // CRITICAL: Remove body class to restore portfolio CSS
      document.body.classList.remove('figma-active');
      console.log('Removed figma-active class from body');

      // Hide close button immediately
      if (this.elements.closeButton) {
        this.elements.closeButton.classList.add('hidden');
        this.elements.closeButton.style.display = 'none';
      }

      // Start page-turn close animation for Figma layer
      if (this.elements.figmaLayer) {
        this.elements.figmaLayer.classList.add('hidden');
        this.elements.figmaLayer.classList.remove('visible');
        this.elements.figmaLayer.style.display = 'none';
        this.elements.figmaLayer.style.opacity = '0';
        this.elements.figmaLayer.style.visibility = 'hidden';
      }

      // Restore main content IMMEDIATELY
      const mainElement = document.querySelector('main[role="main"]');
      if (mainElement) {
        (mainElement as HTMLElement).style.display = 'block';
        (mainElement as HTMLElement).style.opacity = '1';
        (mainElement as HTMLElement).style.visibility = 'visible';
      }

      // Reset portfolio layer
      if (this.elements.portfolioLayer) {
        this.elements.portfolioLayer.classList.remove('peeling');
        this.elements.portfolioLayer.style.transform = '';
        this.elements.portfolioLayer.style.display = 'block';
        this.elements.portfolioLayer.style.opacity = '1';
        this.elements.portfolioLayer.style.visibility = 'visible';
      }

      // Show fold corner again with smooth entrance after page-turn begins
      setTimeout(() => {
        if (this.elements.foldCorner) {
          this.elements.foldCorner.style.display = 'block';
          this.elements.foldCorner.style.visibility = 'visible';
          this.elements.foldCorner.style.transition = 'opacity 0.4s ease, transform 0.4s cubic-bezier(0.4, 0, 0.2, 1), pointer-events 0s ease 0.4s';
          this.elements.foldCorner.style.opacity = '1';
          this.elements.foldCorner.style.transform = 'scale(1)';
          this.elements.foldCorner.style.pointerEvents = 'auto';
          this.elements.foldCorner.style.zIndex = '1000';
        }
      }, 200);

      // Clear localStorage state
      try {
        localStorage.removeItem('paper-corner-state');
      } catch (error) {
        console.warn('Failed to clear paper corner state:', error);
      }

      // Reset closing flag after animation completes
      setTimeout(() => {
        this._closing = false;
        // Reset fold corner transition
        if (this.elements.foldCorner) {
          this.elements.foldCorner.style.transition = '';
        }
      }, 600);

      console.log('Figma layer closed successfully - portfolio restored');
    }

    updateDisplay() {
      if (this.state.isRevealed) {
        this.revealFigma();
      }
      // Portfolio is default state - no action needed when not revealed
    }

    ensurePortfolioVisible() {
      // Only run this once to avoid infinite loops
      if (this._portfolioVisibilityEnsured) return;
      this._portfolioVisibilityEnsured = true;

      // Ensure main portfolio content is visible
      const mainElement = document.querySelector('main[role="main"]') as HTMLElement;
      if (mainElement) {
        mainElement.style.display = 'block';
        mainElement.style.visibility = 'visible';
        mainElement.style.opacity = '1';
        mainElement.style.position = 'static';
        mainElement.style.zIndex = '1';
        mainElement.style.pointerEvents = 'auto';
      }

      // Ensure portfolio layer is transparent when not peeling
      if (this.elements.portfolioLayer) {
        this.elements.portfolioLayer.classList.remove('peeling');
      }

      console.log('Portfolio visibility ensured');
    }
  }

  // Initialize when DOM is ready
  function initializePaperCorner() {
    console.log('EMERGENCY INITIALIZATION: Ensuring correct default state...');

    // CRITICAL: Ensure body starts without figma-active class
    document.body.classList.remove('figma-active');

    // Ensure homepage is visible
    const mainElement = document.querySelector('main[role="main"]') as HTMLElement;
    if (mainElement) {
      mainElement.style.display = 'block';
      mainElement.style.visibility = 'visible';
      mainElement.style.opacity = '1';
      mainElement.style.position = 'static';
      mainElement.style.zIndex = '1';
      mainElement.style.pointerEvents = 'auto';
      console.log('Main portfolio content forced visible');
    }

    // Ensure Figma layer starts hidden
    const figmaLayer = document.querySelector('.figma-layer');
    if (figmaLayer) {
      figmaLayer.classList.remove('visible');
      figmaLayer.classList.add('hidden');
      (figmaLayer as HTMLElement).style.display = 'none';
      (figmaLayer as HTMLElement).style.opacity = '0';
      (figmaLayer as HTMLElement).style.visibility = 'hidden';
      console.log('Figma layer forced hidden');
    }

    // Ensure portfolio layer starts transparent
    const portfolioLayer = document.querySelector('.portfolio-layer');
    if (portfolioLayer) {
      portfolioLayer.classList.remove('peeling');
      (portfolioLayer as HTMLElement).style.display = 'block';
      (portfolioLayer as HTMLElement).style.opacity = '1';
      (portfolioLayer as HTMLElement).style.visibility = 'visible';
    }

    // Ensure fold corner is visible
    const foldCorner = document.querySelector('.fold-corner');
    if (foldCorner) {
      (foldCorner as HTMLElement).style.display = 'block';
      (foldCorner as HTMLElement).style.visibility = 'visible';
      (foldCorner as HTMLElement).style.opacity = '1';
      (foldCorner as HTMLElement).style.zIndex = '1000';
      console.log('Fold corner forced visible');
    }

    // Clear any stored revealed state
    try {
      localStorage.removeItem('paper-corner-state');
      sessionStorage.clear();
    } catch (e) {}

    // Only initialize on desktop (above tablet breakpoint)
    if (window.innerWidth <= 768) {
      console.log('Mobile/tablet detected - paper corner disabled');
      return;
    }

    console.log('Desktop detected - initializing paper corner system');

    new PaperCornerSystem();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePaperCorner);
  } else {
    initializePaperCorner();
  }

  // Handle window resize
  window.addEventListener('resize', () => {
    if (window.innerWidth <= 768) {
      // Hide on mobile/tablet
      const system = document.getElementById('paper-corner-system');
      if (system) {
        system.style.display = 'none';
      }
    } else {
      // Show on desktop
      const system = document.getElementById('paper-corner-system');
      if (system) {
        system.style.display = '';
      }
    }
  });
</script>