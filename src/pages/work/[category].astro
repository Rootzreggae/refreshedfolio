---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Fragment } from 'astro/jsx-runtime';
import { generateUrl } from '../../lib/routing';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  
  // Group projects by category
  const categoryGroups = projects.reduce((groups, project) => {
    const { category } = project.data;
    if (!groups[category]) {
      groups[category] = [];
    }
    groups[category].push(project);
    return groups;
  }, {} as Record<string, CollectionEntry<'projects'>[]>);

  // Only create category pages for multi-project categories
  const categoryPages = Object.entries(categoryGroups)
    .filter(([_, projects]) => projects.length > 1)
    .map(([category, projects]) => ({
      params: { category },
      props: { 
        category,
        projects: projects
          .filter(project => project.data.projectType !== 'category') // Exclude category overview projects
          .sort((a, b) => a.data.order - b.data.order)
      },
    }));

  return categoryPages;
}

interface Props {
  category: string;
  projects: CollectionEntry<'projects'>[];
}

const { category, projects } = Astro.props;

// Category display names
const categoryNames = {
  grafana: 'Grafana Labs',
  opensource: 'Open Source',
  keystrok: 'Keystrok',
  jungleai: 'Jungle AI',
  notes: 'Notes'
};

const categoryName = categoryNames[category as keyof typeof categoryNames] || category;


// Get next category for navigation
const allCategories = ['grafana', 'opensource', 'keystrok', 'jungleai'];
const currentIndex = allCategories.indexOf(category);
const nextCategory = allCategories[currentIndex + 1];
const nextCategoryName = nextCategory ? categoryNames[nextCategory as keyof typeof categoryNames] : null;
---

<BaseLayout
  title={`${categoryName} - Work`}
  description={`Portfolio of ${categoryName} projects and case studies`}
>
  <style>
    @font-face {
      font-family: 'NB International';
      src: url('/font/NB International Regular.otf') format('opentype');
      font-weight: 400;
      font-style: normal;
      font-display: swap;
    }
    
    body {
      background: #1a1a1a;
      color: #ffffff;
      font-family: 'NB International', -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'Inter', sans-serif;
      font-weight: 300;
      line-height: 1.6;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 60px;
    }
    
    /* Header */
    .header {
      padding: 40px 0;
      border-bottom: 1px solid #333333;
    }
    
    .back-link {
      font-size: 18px;
      color: #888888;
      text-decoration: none;
      text-transform: uppercase;
      letter-spacing: 0.8px;
      font-weight: 500;
      transition: color 0.2s ease;
    }
    
    .back-link:hover {
      color: #ffffff;
    }
    
    /* Project Section */
    .project-section {
      padding: 80px 0;
      border-bottom: 1px solid #333333;
    }
    
    .project-section:last-of-type {
      border-bottom: none;
    }
    
    /* Hero Grid */
    .hero {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 80px;
      align-items: start;
      margin-bottom: 80px;
    }
    
    .hero-title {
      font-size: clamp(48px, 6vw, 72px);
      font-weight: 300;
      line-height: 1.1;
      letter-spacing: -0.03em;
      margin-bottom: 30px;
    }
    
    .hero-title a {
      color: #ffffff;
      text-decoration: none;
      transition: color 0.2s ease;
    }
    
    .hero-title a:hover {
      color: #cccccc;
    }
    
    .hero-description {
      font-size: 18px;
      color: #cccccc;
      line-height: 1.7;
    }
    
    .project-meta {
      font-size: 18px;
      color: #666666;
      line-height: 1.8;
      letter-spacing: 0.3px;
      font-weight: 400;
    }
    
    .project-meta .highlight {
      color: #888888;
    }
    
    /* Project Image */
    .project-image {
      width: 100%;
      height: 500px;
      background: #111111;
      border: 1px solid #333333;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #666666;
      font-size: 18px;
      font-weight: 500;
      text-align: center;
      margin-bottom: 20px;
      transition: all 0.3s ease;
      text-decoration: none;
      overflow: hidden;
      position: relative;
    }

    .project-image:hover {
      border-color: #555555;
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .project-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .project-image:hover img {
      transform: scale(1.05);
    }

    .project-image span {
      padding: 40px;
    }
    
    .image-caption {
      font-size: 18px;
      color: #666666;
      text-align: center;
      letter-spacing: 0.3px;
      margin-bottom: 60px;
    }
    
    /* Navigation Footer */
    .nav-footer {
      padding: 80px 0 60px 0;
      border-top: 1px solid #333333;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .nav-link {
      font-size: 18px;
      color: #888888;
      text-decoration: none;
      text-transform: uppercase;
      letter-spacing: 0.8px;
      font-weight: 500;
      transition: color 0.2s ease;
    }
    
    .nav-link:hover {
      color: #ffffff;
    }
    
    /* Responsive */
    @media (max-width: 1024px) {
      .container {
        padding: 0 80px;
      }
      
      .hero {
        gap: 60px;
      }
    }
    
    @media (max-width: 768px) {
      .container {
        padding: 0 40px;
      }
      
      .hero {
        grid-template-columns: 1fr;
        gap: 40px;
        margin-bottom: 60px;
      }
      
      .project-section {
        padding: 60px 0;
      }
      
      .project-image {
        height: 300px;
        padding: 30px;
        font-size: 16px;
      }
      
      .back-link,
      .nav-link {
        font-size: 16px;
      }
      
      .project-meta,
      .image-caption {
        font-size: 16px;
      }
    }
  </style>

  <div class="container">
    <header class="header">
      <a href="/" class="back-link">← Back to Work</a>
    </header>
    
    {projects.map((project) => (
      <section class="project-section">
        <div class="hero">
          <div>
            <h1 class="hero-title">
              <a href={generateUrl(project)}>{project.data.title}</a>
            </h1>
            <p class="hero-description">
              {project.data.description}
            </p>
          </div>
          
          <div class="project-meta">
            PROJECT: <span class="highlight">{categoryName.toUpperCase()}</span><br>
            {project.data.role && (
              <>ROLE: <span class="highlight">{project.data.role.toUpperCase()}</span><br></>
            )}
            {project.data.duration && (
              <>TIMELINE: <span class="highlight">{project.data.duration.toUpperCase()}</span><br></>
            )}
            {project.data.client && (
              <>CLIENT: <span class="highlight">{project.data.client.toUpperCase()}</span><br></>
            )}
            <br>
            
            {project.data.technologies && project.data.technologies.length > 0 && (
              <>
                TECHNOLOGIES:<br>
                {project.data.technologies.map((tech) => (
                  <><span class="highlight">{tech.toUpperCase()}</span><br/></>
                ))}
              </>
            )}
          </div>
        </div>
        
        <a href={generateUrl(project)} class="project-image">
          {project.data.thumbnail || project.data.heroImage ? (
            <img
              src={project.data.thumbnail || project.data.heroImage}
              alt={project.data.heroImageAlt || project.data.title}
              loading="lazy"
              style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;"
            />
          ) : (
            <span style="font-size: 18px; color: #666;">{project.data.title} - Project Overview</span>
          )}
        </a>
        <p class="image-caption">
          {project.data.heroImageAlt || `Overview of the ${project.data.title} project`}
        </p>
      </section>
    ))}
    
    <footer class="nav-footer">
      <a href="/" class="nav-link">← All Work</a>
      {nextCategory && nextCategoryName && (
        <a href={`/work/${nextCategory}`} class="nav-link">Next: {nextCategoryName} →</a>
      )}
    </footer>
  </div>
</BaseLayout>